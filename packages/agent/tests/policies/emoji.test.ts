import { describe, it, expect, beforeEach } from '@jest/globals';
import { EmojiPolicy } from '../../src/policies/emoji';
import { CommentConfig } from '../../src/config/types';

describe('EmojiPolicy', () => {
  let policy: EmojiPolicy;
  let config: CommentConfig;

  beforeEach(() => {
    config = {
      targetLength: {
        min: 20,
        max: 60,
      },
      tone: 'friendly',
      characterPersona: 'Â•ΩÂ•áÂøÉÊó∫Áõõ„Å™ÂàùÂøÉËÄÖ',
      encouragedExpressions: ['„Å™„Çã„Åª„Å©', '„Åô„Åî„ÅÑ'],
      ngWords: [],
      emojiPolicy: {
        enabled: true,
        maxCount: 1,
        allowedEmojis: ['üëè', '‚ú®', 'üôè', 'üí°'],
      },
    };

    policy = new EmojiPolicy(config);
  });

  describe('validate', () => {
    it('should accept comments without emojis', () => {
      const comment = '„Åì„Çå„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑÈÖç‰ø°„Åß„Åô„Å≠ÔºÅ';
      const result = policy.validate(comment);

      expect(result.isValid).toBe(true);
      expect(result.emojiCount).toBe(0);
      expect(result.detectedEmojis).toEqual([]);
    });

    it('should accept comments with allowed emojis within limit', () => {
      const comment = '„Åô„Åî„ÅÑÔºÅüëè';
      const result = policy.validate(comment);

      expect(result.isValid).toBe(true);
      expect(result.emojiCount).toBe(1);
      expect(result.detectedEmojis).toEqual(['üëè']);
    });

    it('should reject comments with too many emojis', () => {
      const comment = '„Åô„Åî„ÅÑÔºÅüëè‚ú® ÊúÄÈ´ò„Åß„ÅôÔºÅüôè';
      const result = policy.validate(comment);

      expect(result.isValid).toBe(false);
      expect(result.emojiCount).toBe(3);
      expect(result.detectedEmojis).toEqual(['üëè', '‚ú®', 'üôè']);
      expect(result.violations).toContain('too_many');
    });

    it('should reject comments with disallowed emojis', () => {
      const comment = '„ÅÑ„ÅÑ„Å≠ÔºÅüòç';
      const result = policy.validate(comment);

      expect(result.isValid).toBe(false);
      expect(result.detectedEmojis).toEqual(['üòç']);
      expect(result.violations).toContain('not_allowed');
    });

    it('should handle disabled emoji policy', () => {
      config.emojiPolicy.enabled = false;
      policy = new EmojiPolicy(config);

      const comment = '„Åü„Åè„Åï„Çì„ÅÆÁµµÊñáÂ≠óÔºÅüòçüéâüéäüéàüéÜ';
      const result = policy.validate(comment);

      expect(result.isValid).toBe(true);
    });
  });

  describe('extractEmojis', () => {
    it('should extract all emojis from text', () => {
      const text = 'Hello üëã World üåç! How are you? üòä';
      const emojis = policy.extractEmojis(text);

      expect(emojis).toEqual(['üëã', 'üåç', 'üòä']);
    });

    it('should handle emoji variants and sequences', () => {
      const text = 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family emoji and ‚ù§Ô∏è heart';
      const emojis = policy.extractEmojis(text);

      expect(emojis).toContain('üë®‚Äçüë©‚Äçüëß‚Äçüë¶');
      expect(emojis).toContain('‚ù§Ô∏è');
    });

    it('should handle text with no emojis', () => {
      const text = 'Just plain text without any emojis';
      const emojis = policy.extractEmojis(text);

      expect(emojis).toEqual([]);
    });
  });

  describe('sanitize', () => {
    it('should remove excess emojis keeping only allowed ones up to limit', () => {
      const comment = '„Åô„Åî„ÅÑÔºÅüëè‚ú®üôèüí° ÊúÄÈ´ò„Åß„ÅôÔºÅ';
      const sanitized = policy.sanitize(comment);

      expect(sanitized).toBe('„Åô„Åî„ÅÑÔºÅüëè ÊúÄÈ´ò„Åß„ÅôÔºÅ');
      expect(policy.extractEmojis(sanitized).length).toBe(1);
    });

    it('should remove all disallowed emojis', () => {
      const comment = '„ÅÑ„ÅÑ„Å≠ÔºÅüòç „Åô„Åî„ÅÑÔºÅüëè ÊúÄÈ´òÔºÅüéâ';
      const sanitized = policy.sanitize(comment);

      expect(sanitized).toBe('„ÅÑ„ÅÑ„Å≠ÔºÅ „Åô„Åî„ÅÑÔºÅüëè ÊúÄÈ´òÔºÅ');
      expect(sanitized).not.toContain('üòç');
      expect(sanitized).not.toContain('üéâ');
    });

    it('should handle comments with only disallowed emojis', () => {
      const comment = '„Åì„Çå„ÅØüòçüòòü•∞Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅ';
      const sanitized = policy.sanitize(comment);

      expect(sanitized).toBe('„Åì„Çå„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑÔºÅ');
    });

    it('should preserve text structure when removing emojis', () => {
      const comment = 'ÊúÄÂàùüëè„ÅÆüëèÁµµÊñáÂ≠óüëè„Åß„Åô';
      const sanitized = policy.sanitize(comment);

      expect(sanitized).toBe('ÊúÄÂàùüëè„ÅÆÁµµÊñáÂ≠ó„Åß„Åô');
    });
  });

  describe('checkSimilarity', () => {
    it('should detect similar emojis in recent history', () => {
      const recentComments = [
        { text: '„ÅÑ„ÅÑ„Å≠ÔºÅüëè', timestamp: Date.now() - 5000 },
        { text: '„Åô„Åî„ÅÑÔºÅ‚ú®', timestamp: Date.now() - 10000 },
      ];

      const isSimilar = policy.checkSimilarity('„Åæ„ÅüÊãçÊâãÔºÅüëè', recentComments);
      expect(isSimilar).toBe(true);
    });

    it('should not flag different emojis as similar', () => {
      const recentComments = [
        { text: '„ÅÑ„ÅÑ„Å≠ÔºÅüëè', timestamp: Date.now() - 5000 },
        { text: '„Åô„Åî„ÅÑÔºÅ‚ú®', timestamp: Date.now() - 10000 },
      ];

      const isSimilar = policy.checkSimilarity('„ÅÇ„Çä„Åå„Å®„ÅÜÔºÅüôè', recentComments);
      expect(isSimilar).toBe(false);
    });

    it('should ignore old comments beyond time window', () => {
      const recentComments = [
        { text: '„ÅÑ„ÅÑ„Å≠ÔºÅüëè', timestamp: Date.now() - 120000 }, // 2ÂàÜÂâç
      ];

      const isSimilar = policy.checkSimilarity('„Åæ„ÅüÊãçÊâãÔºÅüëè', recentComments, 60000); // 1ÂàÜÁ™ì
      expect(isSimilar).toBe(false);
    });

    it('should handle comments without emojis', () => {
      const recentComments = [
        { text: '„ÅÑ„ÅÑ„Å≠ÔºÅ', timestamp: Date.now() - 5000 },
        { text: '„Åô„Åî„ÅÑÔºÅ', timestamp: Date.now() - 10000 },
      ];

      const isSimilar = policy.checkSimilarity('„ÅÇ„Çä„Åå„Å®„ÅÜÔºÅ', recentComments);
      expect(isSimilar).toBe(false);
    });
  });

  describe('formatWithEmoji', () => {
    it('should add appropriate emoji to comment', () => {
      const comment = '„Åì„Çå„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„Åô„Å≠';
      const formatted = policy.formatWithEmoji(comment);

      const emojis = policy.extractEmojis(formatted);
      expect(emojis.length).toBe(1);
      expect(config.emojiPolicy.allowedEmojis).toContain(emojis[0]);
    });

    it('should not add emoji if already present', () => {
      const comment = '„Åì„Çå„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„Åô„Å≠ÔºÅüëè';
      const formatted = policy.formatWithEmoji(comment);

      expect(formatted).toBe(comment);
      expect(policy.extractEmojis(formatted).length).toBe(1);
    });

    it('should respect emoji limit when adding', () => {
      const comment = '„Åô„Åî„ÅÑÔºÅüëè ÊúÄÈ´ò„Åß„Åô';
      const formatted = policy.formatWithEmoji(comment);

      expect(formatted).toBe(comment); // Êó¢„Å´‰∏äÈôê„Å™„ÅÆ„ÅßËøΩÂä†„Åó„Å™„ÅÑ
    });

    it('should handle disabled emoji policy', () => {
      config.emojiPolicy.enabled = false;
      policy = new EmojiPolicy(config);

      const comment = '„Åì„Çå„ÅØÁ¥†Êô¥„Çâ„Åó„ÅÑ„Åß„Åô„Å≠';
      const formatted = policy.formatWithEmoji(comment);

      expect(formatted).toBe(comment);
      expect(policy.extractEmojis(formatted).length).toBe(0);
    });
  });

  describe('config updates', () => {
    it('should respond to config changes', () => {
      // ÊúÄÂ§ßÊï∞„Çí2„Å´Â§âÊõ¥
      const newConfig = {
        ...config,
        emojiPolicy: {
          ...config.emojiPolicy,
          maxCount: 2,
        },
      };

      policy.updateConfig(newConfig);

      const comment = '„Åô„Åî„ÅÑÔºÅüëè‚ú®';
      const result = policy.validate(comment);
      expect(result.isValid).toBe(true); // 2ÂÄã„Åæ„ÅßË®±ÂèØ
    });

    it('should handle empty allowed emoji list', () => {
      const newConfig = {
        ...config,
        emojiPolicy: {
          ...config.emojiPolicy,
          allowedEmojis: [],
        },
      };

      policy.updateConfig(newConfig);

      const comment = '„Åô„Åî„ÅÑÔºÅüëè';
      const result = policy.validate(comment);
      expect(result.isValid).toBe(false);
      expect(result.violations).toContain('not_allowed');
    });
  });
});

# Tsumiki AITDD - Red Phase
# タスク48: CD（デプロイメント）パイプライン設定

name: CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

env:
  NODE_VERSION: '18.x'

jobs:
  # リリースビルド
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build all packages
        run: npm run build

      - name: Package agent for release
        run: |
          cd packages/agent
          npm pack
          mv *.tgz ../../comment-bot-agent.tgz
          cd ../..

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            comment-bot-agent.tgz
            packages/web/.next
          retention-days: 30

  # Vercelへのデプロイ（Web UI）
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: release-build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # GitHubリリースの作成
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: release-build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            comment-bot-agent.tgz
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ドキュメントの更新
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release-build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: npm run docs:generate
        continue-on-error: true

      - name: Deploy documentation
        run: echo "Documentation deployment would happen here"
        # 実際のドキュメントデプロイメントは後で設定
